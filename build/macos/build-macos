#!/bin/bash
set -e
cd -- "$(dirname "$BASH_SOURCE")"

verbose=false
continueOnError=false

while getopts ":hvc" option; do
  case $option in
    h) echo "usage: $0 [-h] [-v] [-c] keyboard:keymap:target"; exit ;;
    v) verbose=true ;;
    c) continueOnError=true ;;
    ?) echo "error: option -$OPTARG is not implemented"; exit ;;
  esac
done

shift $(($OPTIND - 1))
boardParam=$1

arduinoPath="/Applications/Arduino.app"
arduinoDataPath=$(cd ~/Library/Arduino15 && pwd)
nrf52PackagePath="$arduinoDataPath/packages/adafruit/hardware/nrf52"

scriptPath="$(dirname "$BASH_SOURCE")"

blueMicroPath=$(cd $scriptPath/../.. && pwd)
firmwarePath="${blueMicroPath}/firmware"
outputPath="${blueMicroPath}/output"
buildPath="${outputPath}/.build"
buildCachePath="${outputPath}/.build-cache"

sourcePath="${outputPath}/.source/firmware"
keyboardsPath="${sourcePath}/keyboards"

successfulBuilds=0
failedBuilds=0

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

arduino_compile() {
   local keyboard=$1
   local keymap=$2
   local target=$3

   printf "$keyboard:$keymap:$target... "

   keymapHeaderFile="$keyboardsPath/$keyboard/keymaps/$keymap/keymap.h"
   keymapSourceFile="$keyboardsPath/$keyboard/keymaps/$keymap/keymap.cpp"
   configFile="$keyboardsPath/$keyboard/$target/keyboard_config.h"

   cp -f $keymapHeaderFile $sourcePath/
   cp -f $keymapSourceFile $sourcePath/
   cp -f $configFile $sourcePath/

   if $continueOnError; then
      set +e
   fi

   #Need to sleep between compile calls else arduino-builder does not recognise changes
   sleep 2

   #Compile
   cmdCompile="$arduinoPath/Contents/Java/arduino-builder -compile -logger=machine -hardware $arduinoPath/Contents/Java/hardware -hardware $arduinoDataPath/packages -tools $arduinoPath/Contents/Java/tools-builder -tools $arduinoPath/Contents/Java/hardware/tools/avr -tools $arduinoDataPath/packages -built-in-libraries $arduinoPath/Contents/Java/libraries -fqbn=adafruit:nrf52:feather52832:softdevice=s132v6,debug=l0 -ide-version=10805 -build-path $buildPath -warnings=none -build-cache $buildCachePath -prefs=build.warn_data_percentage=75 -prefs=runtime.tools.gcc-arm-none-eabi.path=$arduinoDataPath/packages/adafruit/tools/gcc-arm-none-eabi/5_2-2015q4 -prefs=runtime.tools.nrfjprog.path=$arduinoDataPath/packages/adafruit/tools/nrfjprog/9.4.0 $sourcePath/firmware.ino"
  
   if $verbose; then 
      $cmdCompile
   else
      $cmdCompile > /dev/null
   fi

   (($? != 0)) && failed=true || failed=false

   set -e
   
   if $failed; then
     failedBuilds=$((failedBuilds+1))
     printf "${RED}Failed${NC}\n"
   else
     [[ -d $outputPath/$keyboard ]] || mkdir $outputPath/$keyboard
   
     cp -f $buildPath/firmware.ino.zip $outputPath/$keyboard/$keyboard-$keymap-$target.zip
     cp -f $buildPath/firmware.ino.hex $outputPath/$keyboard/$keyboard-$keymap-$target.hex

     successfulBuilds=$((successfulBuilds+1))
     printf "${GREEN}OK${NC}\n"
   fi
}

printf "\n"
printf -- "-----------------------------------------------------------------------\n"
printf "   Arduino ${BLUE}BlueMicro${NC} Build Script\n"
printf -- "-----------------------------------------------------------------------\n"

if [ -z "$boardParam" ]; then

   printf "\n"
   printf "This script can be run with paramters\n"
   printf "./build-macos [-v] [-c] keyboard:keymap:target\n"

   selectedKeyboard="all"
   selectedKeymap="all"
   selectedTarget="all"
   
   printf "\n"
   read -p "Keyboard name (eg ErgoTravel) [all]: " selectedKeyboard
   selectedKeyboard=${selectedKeyboard:-all}

   if [ "$selectedKeyboard" != "all" ]; then
      read -p "Keymap name (eg default) [all]: " selectedKeymap
      selectedKeymap=${selectedKeymap:-all}

      if [ "$selectedKeymap" != "all" ]; then
         read -p "Target name (eg left / right / master) [all]: " selectedTarget
         selectedTarget=${selectedTarget:-all}
      fi
   fi

else

   IFS=':' read -r -a boardParamSplit <<< "$boardParam"
   selectedKeyboard="${boardParamSplit[0]}"
   if [ -z "$selectedKeyboard" ]; then
      selectedKeyboard="all"
   fi

   selectedKeymap="${boardParamSplit[1]}"
   if [ -z "$selectedKeymap" ]; then
      selectedKeymap="all"
   fi

   selectedTarget="${boardParamSplit[2]}"
   if [ -z "$selectedTarget" ]; then
      selectedTarget="all"
   fi

fi

printf "\n"
printf "Building $selectedKeyboard:$selectedKeymap:$selectedTarget\n"

printf "\n"
printf "Checking file locations\n"
printf -- "-----------------------------------\n"

printf "Arduino Installation... "
if [ -d "$arduinoPath" ]
then
   printf "${GREEN}OK${NC}\n"
else
   printf "${RED}Failed${NC}\n"
   printf "\n"
   printf "Could not find Arduino installation\n"
   printf "Donwload and install to the ${arduinoPath} path\n\n"
   exit 1
fi

printf "Arduino Data Location... "
if [ -d "$arduinoDataPath" ]
then
   printf "${GREEN}OK${NC}\n"
else
   printf "${RED}Failed${NC}\n"
   printf "\n"
   printf "Could not find Arduino Data path\n"
   printf "Expected data in ${arduinoDataPath}\n\n"
   exit 1
fi

printf "Adafruit nRF52 Package... "
if [ -d "$nrf52PackagePath" ]
then
   printf "${GREEN}OK${NC}\n"
else
   printf "${RED}Failed${NC}\n"
   printf "\n"
   printf "Could not find Adafruit nRF52 Package\n"
   printf "Follow the installation instructions at https://learn.adafruit.com/bluefruit-nrf52-feather-learning-guide/arduino-bsp-setup\n\n"
   exit 1
fi

[[ -d $outputPath ]] || mkdir $outputPath
[[ -d $buildPath ]] || mkdir $buildPath
[[ -d $buildCachePath ]] || mkdir $buildCachePath

printf "\n"
printf "Compiling\n"
printf -- "-----------------------------------\n"

rm -rf $sourcePath
mkdir -p $sourcePath
cp -r $firmwarePath/* $sourcePath

for keyboard in $sourcePath/keyboards/*/
do
   keyboard=${keyboard%*/}
   keyboard=${keyboard##*/}

   if [ "$selectedKeyboard" != "all" ] && [ "$selectedKeyboard" != "$keyboard" ]; then
      continue
   fi

   keymaps=()
   for keymap in $sourcePath/keyboards/$keyboard/keymaps/*/
   do
      keymap=${keymap%*/}
      keymap=${keymap##*/}

      if [ "$selectedKeymap" != "all" ] && [ "$selectedKeymap" != "$keymap" ]; then
         continue
      fi

      keymaps+=($keymap)
   done

   targets=()
   for target in $sourcePath/keyboards/$keyboard/*/
   do
      target=${target%*/}
      target=${target##*/}

      if [[ "$target" == "keymaps" ]]; then
         continue
      fi

      if [ "$selectedTarget" != "all" ] && [ "$selectedTarget" != "$target" ]; then
         continue
      fi

      targets+=($target)
   done
   
   for keymap in "${keymaps[@]}"; do
      for target in "${targets[@]}"; do
         arduino_compile $keyboard $keymap $target
      done
   done
done

if ((successfulBuilds == 0)) && ((failedBuilds == 0)); then
   printf "Did not find anything to build for $selectedKeyboard:$selectedKeymap:$selectedTarget\n"
fi

printf "\n"
printf "Successful: ${successfulBuilds} Failed: ${failedBuilds}\n"

printf "\n"
printf "Binaries can be found in ${outputPath}\n"
printf "\n"

if ((failedBuilds != 0 || successfulBuilds == 0)); then
   exit 1
fi

